// Code generated by MockGen. DO NOT EDIT.
// Source: internal/app/contracts/verification-codes-repository.go
//
// Generated by this command:
//
//	mockgen -source=internal/app/contracts/verification-codes-repository.go -destination=test/mocks/verification-codes-repository-mock.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	entities "github.com/henrique998/go-auth/internal/app/entities"
	gomock "go.uber.org/mock/gomock"
)

// MockVerificationCodesRepository is a mock of VerificationCodesRepository interface.
type MockVerificationCodesRepository struct {
	ctrl     *gomock.Controller
	recorder *MockVerificationCodesRepositoryMockRecorder
}

// MockVerificationCodesRepositoryMockRecorder is the mock recorder for MockVerificationCodesRepository.
type MockVerificationCodesRepositoryMockRecorder struct {
	mock *MockVerificationCodesRepository
}

// NewMockVerificationCodesRepository creates a new mock instance.
func NewMockVerificationCodesRepository(ctrl *gomock.Controller) *MockVerificationCodesRepository {
	mock := &MockVerificationCodesRepository{ctrl: ctrl}
	mock.recorder = &MockVerificationCodesRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVerificationCodesRepository) EXPECT() *MockVerificationCodesRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockVerificationCodesRepository) Create(vt entities.VerificationCode) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", vt)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockVerificationCodesRepositoryMockRecorder) Create(vt any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockVerificationCodesRepository)(nil).Create), vt)
}

// Delete mocks base method.
func (m *MockVerificationCodesRepository) Delete(tokenId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", tokenId)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockVerificationCodesRepositoryMockRecorder) Delete(tokenId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockVerificationCodesRepository)(nil).Delete), tokenId)
}

// FindByValue mocks base method.
func (m *MockVerificationCodesRepository) FindByValue(val string) *entities.VerificationCode {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByValue", val)
	ret0, _ := ret[0].(*entities.VerificationCode)
	return ret0
}

// FindByValue indicates an expected call of FindByValue.
func (mr *MockVerificationCodesRepositoryMockRecorder) FindByValue(val any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByValue", reflect.TypeOf((*MockVerificationCodesRepository)(nil).FindByValue), val)
}
