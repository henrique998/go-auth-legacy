// Code generated by MockGen. DO NOT EDIT.
// Source: internal/app/contracts/two-factor-auth-provider.go
//
// Generated by this command:
//
//	mockgen -source=internal/app/contracts/two-factor-auth-provider.go -destination=test/mocks/two-factor-auth-provider-mock.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockTwoFactorAuthProvider is a mock of TwoFactorAuthProvider interface.
type MockTwoFactorAuthProvider struct {
	ctrl     *gomock.Controller
	recorder *MockTwoFactorAuthProviderMockRecorder
}

// MockTwoFactorAuthProviderMockRecorder is the mock recorder for MockTwoFactorAuthProvider.
type MockTwoFactorAuthProviderMockRecorder struct {
	mock *MockTwoFactorAuthProvider
}

// NewMockTwoFactorAuthProvider creates a new mock instance.
func NewMockTwoFactorAuthProvider(ctrl *gomock.Controller) *MockTwoFactorAuthProvider {
	mock := &MockTwoFactorAuthProvider{ctrl: ctrl}
	mock.recorder = &MockTwoFactorAuthProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTwoFactorAuthProvider) EXPECT() *MockTwoFactorAuthProviderMockRecorder {
	return m.recorder
}

// Send mocks base method.
func (m *MockTwoFactorAuthProvider) Send(from, to, message string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", from, to, message)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockTwoFactorAuthProviderMockRecorder) Send(from, to, message any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockTwoFactorAuthProvider)(nil).Send), from, to, message)
}
