// Code generated by MockGen. DO NOT EDIT.
// Source: internal/app/contracts/magic-links-repository.go
//
// Generated by this command:
//
//	mockgen -source=internal/app/contracts/magic-links-repository.go -destination=test/mocks/magic-links-repository-mock.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	entities "github.com/henrique998/go-auth/internal/app/entities"
	gomock "go.uber.org/mock/gomock"
)

// MockMagicLinksRepository is a mock of MagicLinksRepository interface.
type MockMagicLinksRepository struct {
	ctrl     *gomock.Controller
	recorder *MockMagicLinksRepositoryMockRecorder
}

// MockMagicLinksRepositoryMockRecorder is the mock recorder for MockMagicLinksRepository.
type MockMagicLinksRepositoryMockRecorder struct {
	mock *MockMagicLinksRepository
}

// NewMockMagicLinksRepository creates a new mock instance.
func NewMockMagicLinksRepository(ctrl *gomock.Controller) *MockMagicLinksRepository {
	mock := &MockMagicLinksRepository{ctrl: ctrl}
	mock.recorder = &MockMagicLinksRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMagicLinksRepository) EXPECT() *MockMagicLinksRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockMagicLinksRepository) Create(ml entities.MagicLink) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ml)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockMagicLinksRepositoryMockRecorder) Create(ml any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockMagicLinksRepository)(nil).Create), ml)
}

// Delete mocks base method.
func (m *MockMagicLinksRepository) Delete(mlId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", mlId)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockMagicLinksRepositoryMockRecorder) Delete(mlId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockMagicLinksRepository)(nil).Delete), mlId)
}

// FindByValue mocks base method.
func (m *MockMagicLinksRepository) FindByValue(val string) *entities.MagicLink {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByValue", val)
	ret0, _ := ret[0].(*entities.MagicLink)
	return ret0
}

// FindByValue indicates an expected call of FindByValue.
func (mr *MockMagicLinksRepositoryMockRecorder) FindByValue(val any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByValue", reflect.TypeOf((*MockMagicLinksRepository)(nil).FindByValue), val)
}
