// Code generated by MockGen. DO NOT EDIT.
// Source: internal/app/contracts/email-provider.go
//
// Generated by this command:
//
//	mockgen -source=internal/app/contracts/email-provider.go -destination=test/mocks/email-provider-mock.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockEmailProvider is a mock of EmailProvider interface.
type MockEmailProvider struct {
	ctrl     *gomock.Controller
	recorder *MockEmailProviderMockRecorder
}

// MockEmailProviderMockRecorder is the mock recorder for MockEmailProvider.
type MockEmailProviderMockRecorder struct {
	mock *MockEmailProvider
}

// NewMockEmailProvider creates a new mock instance.
func NewMockEmailProvider(ctrl *gomock.Controller) *MockEmailProvider {
	mock := &MockEmailProvider{ctrl: ctrl}
	mock.recorder = &MockEmailProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEmailProvider) EXPECT() *MockEmailProviderMockRecorder {
	return m.recorder
}

// SendMail mocks base method.
func (m *MockEmailProvider) SendMail(to, subject, body string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMail", to, subject, body)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMail indicates an expected call of SendMail.
func (mr *MockEmailProviderMockRecorder) SendMail(to, subject, body any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMail", reflect.TypeOf((*MockEmailProvider)(nil).SendMail), to, subject, body)
}
