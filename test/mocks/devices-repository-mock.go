// Code generated by MockGen. DO NOT EDIT.
// Source: internal/app/contracts/devices-repository.go
//
// Generated by this command:
//
//	mockgen -source=internal/app/contracts/devices-repository.go -destination=test/mocks/devices-repository-mock.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	entities "github.com/henrique998/go-auth/internal/app/entities"
	gomock "go.uber.org/mock/gomock"
)

// MockDevicesRepository is a mock of DevicesRepository interface.
type MockDevicesRepository struct {
	ctrl     *gomock.Controller
	recorder *MockDevicesRepositoryMockRecorder
}

// MockDevicesRepositoryMockRecorder is the mock recorder for MockDevicesRepository.
type MockDevicesRepositoryMockRecorder struct {
	mock *MockDevicesRepository
}

// NewMockDevicesRepository creates a new mock instance.
func NewMockDevicesRepository(ctrl *gomock.Controller) *MockDevicesRepository {
	mock := &MockDevicesRepository{ctrl: ctrl}
	mock.recorder = &MockDevicesRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDevicesRepository) EXPECT() *MockDevicesRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockDevicesRepository) Create(device entities.Device) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", device)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockDevicesRepositoryMockRecorder) Create(device any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockDevicesRepository)(nil).Create), device)
}

// FindByIpAndAccountId mocks base method.
func (m *MockDevicesRepository) FindByIpAndAccountId(ip, accountId string) *entities.Device {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByIpAndAccountId", ip, accountId)
	ret0, _ := ret[0].(*entities.Device)
	return ret0
}

// FindByIpAndAccountId indicates an expected call of FindByIpAndAccountId.
func (mr *MockDevicesRepositoryMockRecorder) FindByIpAndAccountId(ip, accountId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByIpAndAccountId", reflect.TypeOf((*MockDevicesRepository)(nil).FindByIpAndAccountId), ip, accountId)
}

// FindManyByAccountId mocks base method.
func (m *MockDevicesRepository) FindManyByAccountId(accountId string) []entities.Device {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindManyByAccountId", accountId)
	ret0, _ := ret[0].([]entities.Device)
	return ret0
}

// FindManyByAccountId indicates an expected call of FindManyByAccountId.
func (mr *MockDevicesRepositoryMockRecorder) FindManyByAccountId(accountId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindManyByAccountId", reflect.TypeOf((*MockDevicesRepository)(nil).FindManyByAccountId), accountId)
}

// Update mocks base method.
func (m *MockDevicesRepository) Update(device entities.Device) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", device)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockDevicesRepositoryMockRecorder) Update(device any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockDevicesRepository)(nil).Update), device)
}
