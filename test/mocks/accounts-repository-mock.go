// Code generated by MockGen. DO NOT EDIT.
// Source: internal/app/contracts/users-repository.go
//
// Generated by this command:
//
//	mockgen -source=internal/app/contracts/users-repository.go -destination=test/mocks/users-repository-mock.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	entities "github.com/henrique998/go-auth/internal/app/entities"
	errors "github.com/henrique998/go-auth/internal/app/errors"
	gomock "go.uber.org/mock/gomock"
)

// MockUsersRepository is a mock of UsersRepository interface.
type MockUsersRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUsersRepositoryMockRecorder
}

// MockUsersRepositoryMockRecorder is the mock recorder for MockUsersRepository.
type MockUsersRepositoryMockRecorder struct {
	mock *MockUsersRepository
}

// NewMockUsersRepository creates a new mock instance.
func NewMockUsersRepository(ctrl *gomock.Controller) *MockUsersRepository {
	mock := &MockUsersRepository{ctrl: ctrl}
	mock.recorder = &MockUsersRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUsersRepository) EXPECT() *MockUsersRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockUsersRepository) Create(u entities.IAccount) errors.IAppError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", u)
	ret0, _ := ret[0].(errors.IAppError)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockUsersRepositoryMockRecorder) Create(u any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUsersRepository)(nil).Create), u)
}

// FindByEmail mocks base method.
func (m *MockUsersRepository) FindByEmail(email string) (*entities.IAccount, errors.IAppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByEmail", email)
	ret0, _ := ret[0].(*entities.IAccount)
	ret1, _ := ret[1].(errors.IAppError)
	return ret0, ret1
}

// FindByEmail indicates an expected call of FindByEmail.
func (mr *MockUsersRepositoryMockRecorder) FindByEmail(email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByEmail", reflect.TypeOf((*MockUsersRepository)(nil).FindByEmail), email)
}
